#include <stdlib.h>     //exit() 
#include <signal.h>     //signal()
#include <time.h>
#include "ADS1263.h"
#include "stdio.h"
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>	//inet_addr
#include <unistd.h>	//write
#include <bcm2835.h>

// ADC1 test part
#define ADC1		1		
// ADC1 rate test par
#define ADC1_RATE	0		
// ADC2 test part
#define ADC2		0	
// RTD test part	
#define	RTD			0		

#define REF			5.00		//Modify according to actual voltage
								//external AVDD and AVSS(Default), or internal 2.5V
								
#define ADC1_SPS            ADS1263_2400SPS //rate de samples per second


#define landingGearSwitch 20

#define COLOR_BOLD_GREEN	"\033[1;32m"
#define COLOR_BOLD_BLUE		"\033[1;34m"
#define COLOR_GREEN			"\033[32m"
#define COLOR_BLUE			"\033[34m"
#define COLOR_RED			"\033[31m"
#define COLOR_CYAN			"\033[36m"
#define COLOR_YELLOW		"\033[33m"
#define COLOR_OFF			"\033[m"

int end_connection;
int new_socket;
int lostConnection = 0;
int closedConnection = 0;

// closes given socket and sets end_connection to 1
//for intended socket closing
// returns 0 if success, -1 if error
int closeConnection(int socket)
{
	//printf("Connection closed\r\n");
	if(close(socket) < 0)
	{
		//printf("Error closing socket\r\n");
		return -1;
	}
	else
	{
		end_connection = 1;
		closedConnection = 1;
		return 0;
	}
}

void  stopHandler(int signum)
{
    //System Exit
	write(STDOUT_FILENO, "\r\n END \r\n", strlen("\r\n END \r\n"));
    DEV_Module_Exit();
    exit(0);
}
void pipeHandler(int signum)
{
	//write(STDOUT_FILENO, "\r\n CONNECTION LOST!!! \r\n", strlen("\r\n CONNECTION LOST!!! \r\n"));
	lostConnection = 1;
	closeConnection(new_socket);
}


int main(void)
{
	
	/////VARIABLE DEFINITION
    UDOUBLE ADC[10];
	UWORD i;
	unsigned short int portNum = 50000;
	double RES, TEMP;
	int socket_desc;
	struct sockaddr_in client, server;
	char client_message[100] = "";
	struct sigaction signalC, signalPipe;
	int landingGear;
	
	signalC.sa_handler = stopHandler;
	signalPipe.sa_handler = pipeHandler;
	 // Exception handling:ctrl + c
	sigaction(SIGINT, &signalC, NULL);
    sigaction(SIGPIPE, &signalPipe, NULL);
   
	/////////////////////////////////////////////////////
	/////ADS1263 INITIALIZATION
	printf("===============\r\n");//= x15
    printf(COLOR_BOLD_GREEN "SERVER \r\n" COLOR_OFF);
    printf("===============\r\n");
    
    printf("---------------\r\n");//- x15
    printf(COLOR_BOLD_BLUE "AD HAT\r\n" COLOR_OFF);
    printf("---------------\r\n");
    
    if(!bcm2835_init())
    	{
			return 1;
			}
    DEV_Module_Init();

	ADS1263_SetMode(0);

	/* Test DAC */
	// ADS1263_DAC(ADS1263_DAC_VLOT_3, Positive_A6, Open);		
	// ADS1263_DAC(ADS1263_DAC_VLOT_2, Negative_A7, Open);
	//////////////////////////////////////////////////////
	
	printf("ADC:");
	if(ADC1) 
	{
		printf(COLOR_GREEN "ADC1\r\n" COLOR_OFF);
		if(ADS1263_init_ADC1(ADC1_SPS) == 1) // si falla leyendo el ID
		{
			printf("\r\n END \r\n");
			DEV_Module_Exit();
			exit(0);
		}
	}
	else if(ADC2) 
	{
		printf(COLOR_GREEN "ADC2\r\n" COLOR_OFF);
		if(ADS1263_init_ADC2(ADS1263_ADC2_100SPS) == 1) 
		{
			printf("\r\n END \r\n");
			DEV_Module_Exit();
			exit(0);
		}
	}
	
	printf("---------------\r\n");//- x15
    printf(COLOR_BOLD_BLUE "CONNECTION\r\n" COLOR_OFF);
    printf("---------------\r\n");
    
	/////SOCKETS  INITIALIZATION
	printf("Socket: ");
	socket_desc = socket(AF_INET , SOCK_DGRAM , 0);
	//Prepare the client sockaddr_in structure
	client.sin_family = AF_INET;
	client.sin_addr.s_addr = inet_addr("169.254.99.177");
	client.sin_port = htons( portNum );
	//Prepare the server sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = inet_addr("169.254.248.219");
	server.sin_port = htons( portNum );
	
	if (socket_desc == -1)
	{
		printf(COLOR_RED "Could not create socket\r\n" COLOR_OFF);
		printf("Port: " COLOR_RED "%hu\r\n" COLOR_OFF, portNum);
		exit(0);
	}
	if (socket_desc != -1)
	{
		printf(COLOR_GREEN "Socket created\r\n" COLOR_OFF);
		printf("Port: " COLOR_GREEN "%hu\r\n" COLOR_OFF, portNum);
	}

	if (!bcm2835_init())
	{
		return 1;
	}
    // Sets the pin as input.
    bcm2835_gpio_fsel(landingGearSwitch, BCM2835_GPIO_FSEL_INPT);
    // Sets the Pull-up mode for the pin.
    bcm2835_gpio_set_pud(landingGearSwitch, BCM2835_GPIO_PUD_UP);
	
	///////////////////////////////////////////////////
	
	int percentage[10];
	double voltage[10];
	char str2send[100] = "";
	char auxStr[20] = "";
	
	
	while(1) {
		
		while(bind(socket_desc , (const struct sockaddr *)&client , sizeof(client))<0){
		puts("binding...");
		sleep(2);
		//return 1;//para que finalice el programa
		}
		puts("binded");
		sleep(1);
		//send(new_socket , str2send , strlen(str2send) , 0);
		while( end_connection == 0)
		{
				if(ADC1)
				{
					landingGear = bcm2835_gpio_lev(landingGearSwitch);
					ADS1263_GetAll(ADC);	// Get ADC1 value
					for(i=0; i<10; i++) 
					{
						if((ADC[i]>>31) == 1)
						{
							voltage[i] = REF*2 - ADC[i]/2147483648.0 * REF;
							percentage[i] = voltage[i] * 100/REF;
							snprintf(auxStr, 10, "%f", voltage[i]); //make a string from double
							strcat(auxStr, "$");
							strcat(str2send, auxStr);
							printf("IN%d is -%lf V and percentage is %d%%\r\n", i, voltage[i], percentage[i]);	
							}	//7fffffff + 1
						else
						{
							voltage[i] = ADC[i]/2147483647.0 * REF;
							percentage[i] = voltage[i] * 100/REF;
							snprintf(auxStr, 10, "%f", voltage[i]);
							strcat(auxStr, "$");
							strcat(str2send, auxStr);
							printf("IN%d is %lf V and percentage is %d%% \r\n", i, voltage[i], percentage[i]);		//7fffffff
						}
						
					}
					strcpy( auxStr, "" );
					snprintf(auxStr, 2, "%d", landingGear); //make a string from double
					strcat(auxStr, "$");
					strcat(str2send, auxStr);
				}
				else if(ADC2)
				{
					landingGear = bcm2835_gpio_lev(landingGearSwitch);
					ADS1263_GetAll_ADC2(ADC);	// Get ADC2 value
					for(i=0; i<10; i++) 
					{
						if((ADC[i]>>23) == 1)
						{
							voltage[i] = REF*2 - ADC[i]/8388608.0 * REF;
							percentage[i] = voltage[i] * 100/REF;
							snprintf(auxStr, 10, "%f", voltage[i]); //make a string from double
							strcat(auxStr, "$");
							strcat(str2send, auxStr);
							printf("IN%d is -%lf V and percentage is %d%%\r\n", i, voltage[i], percentage[i]);	
							}	//7fffffff + 1
						else
						{
							voltage[i] = ADC[i]/8388607.0 * REF;
							percentage[i] = voltage[i] * 100/REF;
							snprintf(auxStr, 10, "%f", voltage[i]);
							strcat(auxStr, "$");
							strcat(str2send, auxStr);
							printf("IN%d is %lf V and percentage is %d%%  \r\n", i, voltage[i], percentage[i]);		//7fffffff
						}
						
					}
					strcpy( auxStr, "" );
					snprintf(auxStr, 2, "%d", landingGear); //make a string from double
					strcat(auxStr, "$");
					strcat(str2send, auxStr);
				}
				sendto(socket_desc , str2send , 100 , MSG_DONTWAIT, (const struct sockaddr *)&server, sizeof(server));
				printf("%s\n", str2send);
				/*flag MSG_NOSIGNAL, if not, terminal returns exit error 141
				  solution->https://github.com/SFML/SFML/issues/72*/	
				strcpy(client_message , "");
				//recv(new_socket , client_message , 100 , MSG_DONTWAIT);
				strcpy( str2send, "") ;
				strcpy( auxStr, "" );
				printf("\033[11A");//Move the cursor up

		}
		
		
		if(lostConnection == 1)
		{
			printf("\033[12;9H""\033[K" COLOR_RED "Connection lost\n" COLOR_OFF);
			bcm2835_close();
			lostConnection = 0;
			sleep(1);
			}
		if(closedConnection == 1)
		{
			printf("\033[12;9H""\033[K" COLOR_RED "Connection closed\n" COLOR_OFF);
			bcm2835_close();
			closedConnection = 0;
			sleep(1);
			}
	}
	


	 if(ADC1_RATE) {
		printf("TEST_ADC1_RATE\r\n");
		struct timespec start={0, 0}, finish={0, 0}; 
		clock_gettime(CLOCK_REALTIME, &start);
		double time;
		UBYTE isSingleChannel = 0;
		if(isSingleChannel) {
			for(i=0; i<10000; i++) {
				ADS1263_GetChannalValue(0);
			}
			clock_gettime(CLOCK_REALTIME, &finish);
			time =  (double)(finish.tv_sec-start.tv_sec)*1000.0 + (double)(finish.tv_nsec-start.tv_nsec)/1000000.0;
			printf("%lf ms\r\n", time);
			printf("single channel %lf kHz\r\n", 10000 / time);

		}
		else {
			for(i=0; i<1000; i++) {
				ADS1263_GetAll(ADC);
			}
			clock_gettime(CLOCK_REALTIME, &finish);
			time =  (double)(finish.tv_sec-start.tv_sec)*1000.0 + (double)(finish.tv_nsec-start.tv_nsec)/1000000.0;
			printf("%lf ms\r\n", time);
			printf("multi channel %lf kHz\r\n", 10000 / time);
		}

	}
	else if(RTD) {
		printf("TEST_RTD\r\n");
		ADC[0] = ADS1263_RTD(ADS1263_DELAY_8d8ms, ADS1263_GAIN_1, ADS1263_20SPS);
		RES = ADC[0]/2147483647.0 * 2.0 * 2000.0;	//2000.0 -- 2000R, 2.0 -- 2*i
		printf("Res is %lf \r\n", RES);
		TEMP = (RES/100.0 - 1.0) / 0.00385;		//0.00385 -- pt100
		printf("Temp is %lf \r\n", TEMP);
		printf("\33[2A");//Move the cursor up
	}

	return 0;
}
